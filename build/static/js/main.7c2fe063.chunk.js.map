{"version":3,"sources":["store/socket.js","store/constants.js","store/users.js","store/game.js","store/definitions.js","store/index.js","components/screens/gameTabs/WaitingForHost.jsx","components/screens/gameTabs/WaitingForResults.jsx","components/screens/gameTabs/VoteList.jsx","components/screens/gameTabs/WatchVotes.jsx","components/screens/gameTabs/WriteADefinition.jsx","components/screens/gameTabs/ChooseAWord.jsx","components/screens/gameTabs/Vote.jsx","components/screens/gameTabs/Summary.jsx","components/screens/TabsScreen.jsx","components/screens/HostScreen.jsx","components/screens/PlayerScreen.jsx","components/screens/LobbyScreen.jsx","components/screens/PleaseRegisterScreen.jsx","components/GameSpace.jsx","components/Room.jsx","components/Content.jsx","components/Header.jsx","components/App.js","reportWebVitals.js","index.js"],"names":["loc","document","location","url","protocol","hostname","port","socket","io","autoConnect","cors","origin","domain","methods","emit","event","data","ack","console","log","args","register","handler","on","constants","CONNECT","DISCONNECT","REGISTER_PLAYER","BEGIN_GAME_CLAIMING_HOST","BEGIN_GAME","HOST_SUBMITS_WORD","PLAYER_SUBMITS_DEFN","VOTE","ON_CONNECT","PLAYER_DISCONNECTS","PLAYER_REGISTERED","GAME_BEGUN","HOST_SUBMITTED_WORD","PLAYER_SUBMITTED_DEFN","ALL_DEFNS_SUBMITTED","ALL_PLAYERS_VOTED","PLAYER_VOTED","Users","store","users","host","tmpUserName","registeredUserName","registeringUser","makeAutoObservable","this","window","sessionStorage","getItem","initializeExistingUsers","addPlayer","onGameBegins","Object","entries","map","name","obj","forEach","u","newUser","oldName","action","setItem","val","Game","tmpHostWord","hostWord","hostWordSubmitDisabled","stage","summary","initializeGame","onBegin","onHostSubmittedWord","setStage","onAllPlayersVoted","playing","word","Definitions","tmpDefinition","playerSubmissionPercent","definitions","hasVoted","initializeDefinitions","onPlayerSubittedDefinition","onPlayerVoted","percent","definition","push","_id","votes","find","game","isHost","connect","registerUserName","createContext","WaitingForHost","Tab","Pane","WaitForResults","observer","def","useContext","Store","Progress","indicating","Vote","user","text","showUser","allowVote","onClick","useState","hovering","setHovering","List","Item","onMouseEnter","onMouseLeave","Icon","style","width","Statistic","size","Value","Label","Content","Description","Header","as","color","VoteList","defs","toVote","setToVote","divided","relaxed","Confirm","header","content","open","onCancel","onConfirm","vote","WatchVotes","WriteADefinition","Form","TextArea","placeholder","rows","onChange","e","value","typeDefinition","Button","fluid","float","submitDefinition","ChooseAWord","Input","typeHostWord","submitHostWord","disabled","Summary","Segment","votedBy","points","horizontal","i","Group","begin","claimHost","TabsScreen","children","panes","screenMap","activeIndex","menuItem","render","choosing","writing","voting","HostScreen","WaitingForResults","waiting","PlayerScreen","LobbyScreen","PleaseRegisterScreen","GameSpace","isRegistered","Person","Room","getPeople","p","ref","useRef","Ref","innerRef","Grid","Column","Sticky","context","offset","stretched","Menu","fixed","inverted","Container","position","userNameRegisterButtonDisabled","loading","typeUserName","App","marginTop","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","Provider","getElementById"],"mappings":"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","file":"static/js/main.7c2fe063.chunk.js","sourcesContent":["import io from \"socket.io-client\";\n\nconst loc = document.location;\nconst url =\n    loc.protocol + \"//\" + loc.hostname + (loc.port ? \":\" + loc.port : \"\");\n\nconst socket = io(url, {\n    autoConnect: false,\n    cors: {\n        origin: `http://${document.domain}`,\n        methods: [\"GET\", \"POST\"],\n    },\n});\n\nexport const connect = () => {\n    console.log(\"connecting\");\n    socket.connect();\n};\n\nexport const emit = (event, data, ack = () => {}) => {\n    console.log(`EVENT ${event} with data`, data);\n    socket.emit(event, data, (args) => {\n        console.log(`ACK ${event}`);\n        ack(args);\n    });\n};\n\nexport const register = (event, handler) =>\n    socket.on(event, (data) => {\n        console.log(`EXTERNAL EVENT: ${event} with data`, data);\n        handler(data);\n    });\n","const constants = {\n    CONNECT: \"connect\",\n    DISCONNECT: \"disconnect\",\n\n    // client -> server\n    REGISTER_PLAYER: \"register_user\", // 'name'\n    BEGIN_GAME_CLAIMING_HOST: \"begin_game_claiming_host\",\n    BEGIN_GAME: \"begin_game\",\n    HOST_SUBMITS_WORD: \"host_submits_word\", // 'word'\n    PLAYER_SUBMITS_DEFN: \"player_submits_defn\", // 'definition'\n    VOTE: \"vote\", // 'DefnId'\n\n    // server -> client\n    ON_CONNECT: \"on_connect\",\n    PLAYER_DISCONNECTS: \"user_disconnects\",\n    PLAYER_REGISTERED: \"user_registered\",\n    GAME_BEGUN: \"game_begun\",\n    HOST_SUBMITTED_WORD: \"host_submitted_word\",\n    PLAYER_SUBMITTED_DEFN: \"player_submitted_defn\",\n    ALL_DEFNS_SUBMITTED: \"all_defns_submitted\",\n    ALL_PLAYERS_VOTED: \"all_players_voted\",\n    PLAYER_VOTED: \"player_voted\",\n};\nexport default constants;\n","import { makeAutoObservable, action } from \"mobx\";\nimport { register, emit } from \"./socket\";\nimport constants from \"./constants\";\n\nclass Users {\n    store = null;\n\n    users = {};\n\n    host = null;\n\n    tmpUserName = \"\";\n    registeredUserName = \"\";\n    registeringUser = false; // waiting for registration response\n\n    get userNameRegisterButtonDisabled() {\n        return (\n            this.registeringUser ||\n            this.registeredUserName === this.tmpUserName ||\n            !this.tmpUserName\n        );\n    }\n    get getPeople() {\n        return Object.entries(this.users).map(([name, obj]) => ({\n            name,\n            ...obj,\n        }));\n    }\n\n    get isHost() {\n        return this.registeredUserName === this.host;\n    }\n\n    get isRegistered() {\n        return !!this.registeredUserName;\n    }\n\n    constructor(store) {\n        makeAutoObservable(this);\n        this.store = store;\n        this.tmpUserName = window.sessionStorage.getItem(\"userName\") || \"\";\n\n        register(constants.ON_CONNECT, (data) =>\n            this.initializeExistingUsers(data)\n        );\n        register(constants.PLAYER_REGISTERED, (data) => this.addPlayer(data));\n        register(constants.GAME_BEGUN, (data) => this.onGameBegins(data));\n    }\n\n    /** EXTERNAL EVENT HANDLERS **/\n\n    initializeExistingUsers({ users = [], host }) {\n        users.forEach((u) => (this.users[u.name] = u));\n        this.host = host;\n    }\n\n    addPlayer(newUser) {\n        const { name, oldName } = newUser;\n        delete this.users[oldName];\n        this.users[name] = newUser;\n    }\n\n    onGameBegins({ host, users }) {\n        this.host = host;\n        users.forEach((u) => (this.users[u.name] = u));\n    }\n\n    /** TRIGGER EXTERNAL EVENTS **/\n\n    registerUserName() {\n        this.registeringUser = true;\n        emit(\n            constants.REGISTER_PLAYER,\n            this.tmpUserName,\n            action(() => {\n                this.registeringUser = false;\n                this.registeredUserName = this.tmpUserName;\n                window.sessionStorage.setItem(\"userName\", this.tmpUserName);\n            })\n        );\n    }\n\n    /** INTERNAL STATE ACTIONS**/\n\n    typeUserName(val) {\n        this.tmpUserName = val;\n    }\n}\n\nexport default Users;\n","import { makeAutoObservable, action } from \"mobx\";\nimport { register, emit } from \"./socket\";\nimport constants from \"./constants\";\n\nclass Game {\n    store = null;\n    tmpHostWord = \"\";\n    hostWord = \"\";\n    hostWordSubmitDisabled = false;\n    stage = null;\n    summary = [];\n\n    constructor(store) {\n        makeAutoObservable(this);\n        this.store = store;\n\n        register(constants.ON_CONNECT, (data) => this.initializeGame(data));\n        register(constants.GAME_BEGUN, (data) => this.onBegin(data));\n        register(constants.HOST_SUBMITTED_WORD, (data) =>\n            this.onHostSubmittedWord(data)\n        );\n        register(constants.ALL_DEFNS_SUBMITTED, (data) =>\n            this.setStage(\"voting\")\n        );\n        register(constants.ALL_PLAYERS_VOTED, (data) =>\n            this.onAllPlayersVoted(data)\n        );\n    }\n\n    /** EXTERNAL EVENT HANDLERS **/\n\n    initializeGame({ playing, hostWord, stage }) {\n        this.playing = playing;\n        this.hostWord = hostWord;\n        this.stage = stage;\n    }\n\n    onBegin({ stage }) {\n        this.playing = true;\n        this.stage = stage;\n    }\n\n    onHostSubmittedWord({ stage, word = \"fake\" }) {\n        this.hostWord = word;\n        this.stage = stage;\n    }\n    onAllPlayersVoted({ summary }) {\n        this.summary = summary;\n        this.stage = \"summary\";\n    }\n\n    /** TRIGGER EXTERNAL EVENTS **/\n\n    begin() {\n        emit(constants.BEGIN_GAME);\n    }\n    claimHost() {\n        emit(constants.BEGIN_GAME_CLAIMING_HOST);\n    }\n\n    submitHostWord() {\n        this.hostWordSubmitDisabled = true;\n        emit(\n            constants.HOST_SUBMITS_WORD,\n            this.tmpHostWord,\n            action(() => (this.hostWordSubmitDisabled = false))\n        );\n    }\n\n    /** INTERNAL STATE ACTIONS**/\n\n    typeHostWord(val) {\n        this.tmpHostWord = val;\n    }\n\n    setStage(stage) {\n        this.stage = stage;\n    }\n}\n\nexport default Game;\n","import { makeAutoObservable, action } from \"mobx\";\nimport { register, emit } from \"./socket\";\nimport constants from \"./constants\";\nimport find from \"lodash/find\";\n\nclass Definitions {\n    store;\n    tmpDefinition = \"\";\n\n    playerSubmissionPercent = 0;\n    definitions = [];\n    hasVoted = true;\n\n    constructor(store) {\n        makeAutoObservable(this);\n        this.store = store;\n        register(constants.ON_CONNECT, (data) =>\n            this.initializeDefinitions(data)\n        );\n        register(constants.PLAYER_SUBMITTED_DEFN, (data) =>\n            this.onPlayerSubittedDefinition(data)\n        );\n        register(constants.PLAYER_VOTED, (data) => this.onPlayerVoted(data));\n    }\n\n    /** EXTERNAL EVENT HANDLERS **/\n    initializeDefinitions({ definitions }) {\n        this.definitions = definitions;\n        this.tmpDefinition = \"\";\n    }\n\n    onPlayerSubittedDefinition({ percent, definition }) {\n        this.playerSubmissionPercent = percent;\n        this.definitions.push(definition);\n    }\n\n    onPlayerVoted({ _id, votes }) {\n        const votedDef = find(this.definitions, { _id });\n        votedDef.votes = votes;\n    }\n\n    /** TRIGGER EXTERNAL EVENTS **/\n\n    submitDefinition() {\n        emit(\n            constants.PLAYER_SUBMITS_DEFN,\n            this.tmpDefinition,\n            action(() => {\n                if (this.store.game.stage === \"writing\") {\n                    if (this.store.users.isHost)\n                        this.store.game.setStage(\"voting\");\n                    else this.store.game.setStage(\"waiting\");\n                }\n            })\n        );\n    }\n\n    vote(_id) {\n        emit(\n            constants.VOTE,\n            _id,\n            action(() => (this.hasVoted = false))\n        );\n    }\n\n    /** INTERNAL STATE ACTIONS**/\n\n    typeDefinition(val) {\n        this.tmpDefinition = val;\n    }\n}\n\nexport default Definitions;\n","import { makeAutoObservable } from \"mobx\";\nimport { createContext } from \"react\";\nimport { connect } from \"./socket\";\nimport Users from \"./users\";\nimport Game from \"./game\";\nimport Definitions from \"./definitions\";\n\nclass Store {\n    users = null;\n    game = null;\n    definitions = null;\n    constructor() {\n        makeAutoObservable(this);\n        this.users = new Users(this);\n        this.game = new Game(this);\n        this.definitions = new Definitions(this);\n\n        // after all listeners in substores have been initialized\n        connect();\n        if (this.users.tmpUserName) this.users.registerUserName();\n    }\n}\n\nexport const store = new Store();\nexport default createContext();\n","import React from \"react\";\nimport { Tab } from \"semantic-ui-react\";\n\nconst WaitingForHost = () => (\n\t<Tab.Pane>\n\t\t<p>Waiting for the host to select a word</p>\n\t</Tab.Pane>\n);\n\nexport default WaitingForHost;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../../store\";\nimport { Tab, Progress } from \"semantic-ui-react\";\n\nconst WaitForResults = observer(() => {\n    const store = useContext(Store);\n    const def = store.definitions;\n    return (\n        <Tab.Pane>\n            <p>Waiting for all the players to submit their defintions.</p>\n            <Progress percent={def.playerSubmissionPercent} indicating />\n        </Tab.Pane>\n    );\n});\n\nexport default WaitForResults;\n","import React, { useContext, useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../../store\";\nimport { List, Confirm, Statistic, Icon } from \"semantic-ui-react\";\n\nconst Vote = ({\n\t_id,\n\tuser = \"ANON\",\n\ttext = \"NO TEXT\",\n\tvotes = 0,\n\tshowUser,\n\tallowVote,\n\tonClick = () => {},\n}) => {\n\tconst [hovering, setHovering] = useState(false);\n\treturn (\n\t\t<List.Item\n\t\t\tonMouseEnter={() => setHovering(true)}\n\t\t\tonMouseLeave={() => setHovering(false)}\n\t\t>\n\t\t\t<List.Icon style={{ width: 30 }}>\n\t\t\t\t<Statistic size=\"mini\">\n\t\t\t\t\t<Statistic.Value>{votes}</Statistic.Value>\n\t\t\t\t\t<Statistic.Label>Votes</Statistic.Label>\n\t\t\t\t</Statistic>\n\t\t\t</List.Icon>\n\t\t\t<List.Content onClick={allowVote ? () => onClick() : () => {}}>\n\t\t\t\t<List.Description>{text}</List.Description>\n\t\t\t\t<List.Header as=\"a\">\n\t\t\t\t\t{showUser && user}\n\t\t\t\t\t{hovering && allowVote && (\n\t\t\t\t\t\t<Icon name=\"check\" color=\"green\" />\n\t\t\t\t\t)}\n\t\t\t\t</List.Header>\n\t\t\t</List.Content>\n\t\t</List.Item>\n\t);\n};\n\nconst VoteList = observer(({ allowVote, showUser }) => {\n\tconst store = useContext(Store);\n\tconst defs = store.definitions;\n\tconst [toVote, setToVote] = useState(null);\n\treturn (\n\t\t<div>\n\t\t\t<List divided relaxed>\n\t\t\t\t{defs.definitions.map((def) => {\n\t\t\t\t\tconst { _id } = def;\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Vote\n\t\t\t\t\t\t\tshowUser={showUser}\n\t\t\t\t\t\t\tallowVote={allowVote}\n\t\t\t\t\t\t\tonClick={() => setToVote(def)}\n\t\t\t\t\t\t\tkey={_id}\n\t\t\t\t\t\t\t{...def}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</List>\n\t\t\t<Confirm\n\t\t\t\theader=\"Do you want to vote for this Defintion\"\n\t\t\t\tcontent={!!toVote ? toVote.text : \"\"}\n\t\t\t\topen={!!toVote}\n\t\t\t\tonCancel={() => setToVote(null)}\n\t\t\t\tonConfirm={() => {\n\t\t\t\t\tdefs.vote(toVote._id);\n\t\t\t\t\tsetToVote(null);\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t);\n});\n\nexport default VoteList;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../../store\";\nimport { Tab, Progress } from \"semantic-ui-react\";\nimport VoteList from \"./VoteList\";\n\nconst WatchVotes = observer(() => {\n    const store = useContext(Store);\n    const defs = store.definitions;\n    return (\n        <Tab.Pane>\n            <p>Waiting for all the players to submit their definitions.</p>\n            <Progress percent={defs.playerSubmissionPercent} indicating />\n            <VoteList showUser />\n        </Tab.Pane>\n    );\n});\n\nexport default WatchVotes;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../../store\";\n\nimport { Tab, Form, TextArea, Button, Header, Icon } from \"semantic-ui-react\";\n\nconst WriteADefinition = observer(() => {\n\tconst store = useContext(Store);\n\tconst game = store.game;\n\tconst defs = store.definitions;\n\treturn (\n\t\t<Tab.Pane>\n\t\t\t<Header as=\"h2\">\n\t\t\t\t<Icon name=\"envelope outline\" />\n\t\t\t\t<Header.Content>{game.hostWord}</Header.Content>\n\t\t\t</Header>\n\t\t\t<p>\n\t\t\t\tEnter your definition. Once all the players are done. we'll move\n\t\t\t\tonto voting\n\t\t\t</p>\n\t\t\t<Form>\n\t\t\t\t<TextArea\n\t\t\t\t\tplaceholder=\"Enter your definition\"\n\t\t\t\t\trows={4}\n\t\t\t\t\tonChange={(e, { value }) => defs.typeDefinition(value)}\n\t\t\t\t\tvalue={`${defs.tmpDefinition}` || \"\"}\n\t\t\t\t/>\n\t\t\t\t<Button\n\t\t\t\t\tfluid\n\t\t\t\t\tfloat=\"right\"\n\t\t\t\t\tcontent=\"Submit Definition\"\n\t\t\t\t\tonClick={() => defs.submitDefinition()}\n\t\t\t\t/>\n\t\t\t</Form>\n\t\t</Tab.Pane>\n\t);\n});\n\nexport default WriteADefinition;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../../store\";\nimport { Tab, Input } from \"semantic-ui-react\";\n\nconst ChooseAWord = observer(() => {\n\tconst store = useContext(Store);\n\tconst game = store.game;\n\n\treturn (\n\t\t<Tab.Pane>\n\t\t\t<p>\n\t\t\t\tEnter a word. once you are ready hit subit to notify all the\n\t\t\t\tplayers\n\t\t\t</p>\n\t\t\t<Input\n\t\t\t\tfluid\n\t\t\t\tplaceholder=\"Enter a word\"\n\t\t\t\tvalue={store.hostWord}\n\t\t\t\tonChange={(e, { value }) => game.typeHostWord(value)}\n\t\t\t\taction={{\n\t\t\t\t\tcontent: \"Submit\",\n\t\t\t\t\tonClick: () => game.submitHostWord(),\n\t\t\t\t\tdisabled: store.hostWordSubmitDisabled,\n\t\t\t\t}}\n\t\t\t/>\n\t\t</Tab.Pane>\n\t);\n});\n\nexport default ChooseAWord;\n","import React from \"react\";\nimport { Tab } from \"semantic-ui-react\";\nimport VoteList from \"./VoteList\";\n\nconst Vote = () => (\n\t<Tab.Pane>\n\t\t<VoteList allowVote />\n\t</Tab.Pane>\n);\n\nexport default Vote;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../../store\";\nimport {\n    Tab,\n    Segment,\n    List,\n    Header,\n    Icon,\n    Statistic,\n    Button,\n} from \"semantic-ui-react\";\n\nconst Summary = observer(() => {\n    const store = useContext(Store);\n    const game = store.game;\n    return (\n        <Tab.Pane>\n            <Segment>\n                <p>Round is complete!</p>\n                <Header as=\"h2\">\n                    <Icon name=\"envelope outline\" />\n                    <Header.Content>{game.hostWord}</Header.Content>\n                </Header>\n            </Segment>\n            <List divided relaxed>\n                {game.summary.map(({ name, host, text, votedBy, points }) => (\n                    <List.Item key={name}>\n                        <List.Icon>\n                            <Statistic size=\"mini\">\n                                <Statistic.Value>{points}</Statistic.Value>\n                                <Statistic.Label>Points</Statistic.Label>\n                            </Statistic>\n                        </List.Icon>\n                        <List.Content>\n                            <List.Header as=\"a\">\n                                <Icon\n                                    name={host ? \"user secret\" : \"user outline\"}\n                                />\n                                {name}\n                            </List.Header>\n                            <List.Description>{text}</List.Description>\n                            <List horizontal>\n                                {votedBy.map((name, i) => (\n                                    <List.Item key={i}>\n                                        <List.Header as=\"a\">{name}</List.Header>\n                                    </List.Item>\n                                ))}\n                            </List>\n                        </List.Content>\n                    </List.Item>\n                ))}\n            </List>\n\n            <Segment>\n                <p>Restart the game</p>\n                <Button.Group>\n                    <Button\n                        content=\"randomize Host\"\n                        onClick={() => game.begin()}\n                    />\n                    <Button\n                        content=\"claim Host\"\n                        onClick={() => game.claimHost()}\n                    />\n                </Button.Group>\n            </Segment>\n        </Tab.Pane>\n    );\n});\n\nexport default Summary;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../store\";\nimport { Segment, Tab } from \"semantic-ui-react\";\n\nconst TabsScreen = observer(({ children, panes, screenMap = {} }) => {\n    const store = useContext(Store);\n    const game = store.game;\n    return (\n        <div>\n            <Segment>{children}</Segment>\n            <Tab panes={panes} activeIndex={screenMap[game.stage]} />\n        </div>\n    );\n});\n\nexport default TabsScreen;\n","import React from \"react\";\nimport { ChooseAWord, WriteADefinition, WatchVotes, Summary } from \"./gameTabs\";\nimport TabsScreen from \"./TabsScreen\";\n\nconst panes = [\n    { menuItem: \"Choose a word\", render: () => <ChooseAWord /> },\n    {\n        menuItem: \"write the true definition\",\n        render: () => <WriteADefinition />,\n    },\n    { menuItem: \"Watch Votes\", render: () => <WatchVotes /> },\n    { menuItem: \"Summary\", render: () => <Summary /> },\n];\n\nconst screenMap = {\n    choosing: 0,\n    writing: 1,\n    voting: 2,\n    summary: 3,\n};\n\nconst HostScreen = () => (\n    <TabsScreen panes={panes} screenMap={screenMap}>\n        <p>You are the Host!</p>\n    </TabsScreen>\n);\n\nexport default HostScreen;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../store\";\nimport {\n\tWaitingForHost,\n\tWriteADefinition,\n\tWaitingForResults,\n\tVote,\n\tSummary,\n} from \"./gameTabs\";\nimport TabsScreen from \"./TabsScreen\";\n\nconst panes = [\n\t{ menuItem: \"Host Chooses a Word\", render: () => <WaitingForHost /> },\n\t{ menuItem: \"Write a Definition\", render: () => <WriteADefinition /> },\n\t{ menuItem: \"Wait for results\", render: () => <WaitingForResults /> },\n\t{ menuItem: \"Vote\", render: () => <Vote /> },\n\t{ menuItem: \"Summary\", render: () => <Summary /> },\n];\n\nconst screenMap = {\n\tchoosing: 0,\n\twriting: 1,\n\twaiting: 2,\n\tvoting: 3,\n\tsummary: 4,\n};\n\nconst PlayerScreen = observer(() => {\n\tconst store = useContext(Store);\n\tconst users = store.users;\n\treturn (\n\t\t<TabsScreen panes={panes} screenMap={screenMap}>\n\t\t\t<p>You Are a Player!</p>\n\t\t\t<p>\n\t\t\t\t<strong>{users.host}</strong> is the Host!\n\t\t\t</p>\n\t\t</TabsScreen>\n\t);\n});\n\nexport default PlayerScreen;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../store\";\nimport { Segment, Button } from \"semantic-ui-react\";\n\nconst LobbyScreen = observer(() => {\n    const store = useContext(Store);\n    const game = store.game;\n    return (\n        <div>\n            <Segment>\n                <p>The game hasn't started yet</p>\n                <p>Once Everyone has registered hit the button to start</p>\n                <Button fluid onClick={() => game.begin()} content=\"Begin\" />\n            </Segment>\n        </div>\n    );\n});\n\nexport default LobbyScreen;\n","import React from \"react\";\nimport { Segment } from \"semantic-ui-react\";\n\nconst PleaseRegisterScreen = () => {\n    return (\n        <div>\n            <Segment>\n                <p>Please Register a name to join the game in progress</p>\n            </Segment>\n        </div>\n    );\n};\n\nexport default PleaseRegisterScreen;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../store\";\nimport {\n    HostScreen,\n    PlayerScreen,\n    LobbyScreen,\n    PleaseRegisterScreen,\n} from \"./screens\";\n\nconst GameSpace = observer(() => {\n    const store = useContext(Store);\n    const game = store.game;\n    const users = store.users;\n    if (!users.isRegistered) return <PleaseRegisterScreen />;\n    if (game.stage === \"lobby\") return <LobbyScreen />;\n    if (users.isHost) return <HostScreen />;\n    else return <PlayerScreen />;\n});\n\nexport default GameSpace;\n","import React, { useContext } from \"react\";\nimport { Segment, Header, List } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../store\";\n\nconst Person = ({ name = \"Anon\", points = -1 }) => (\n\t<List.Item>\n\t\t<List.Header as=\"a\">{name}</List.Header>\n\t\t<List.Description> {points} points</List.Description>\n\t</List.Item>\n);\n\nconst Room = observer(() => {\n\tconst store = useContext(Store);\n\treturn (\n\t\t<Segment>\n\t\t\t<Header>People in the room</Header>\n\t\t\t<List>\n\t\t\t\t{store.users.getPeople.map(({ name, ...p }) => (\n\t\t\t\t\t<Person key={name} name={name} {...p} />\n\t\t\t\t))}\n\t\t\t</List>\n\t\t</Segment>\n\t);\n});\n\nexport default Room;\n","import React, { useRef } from \"react\";\nimport { Grid, Ref, Sticky } from \"semantic-ui-react\";\nimport Room from \"./Room\";\n\nconst Content = ({ children }) => {\n\tconst ref = useRef();\n\treturn (\n\t\t<Ref innerRef={ref}>\n\t\t\t<Grid>\n\t\t\t\t<Grid.Column width={4}>\n\t\t\t\t\t<Sticky context={ref} offset={100}>\n\t\t\t\t\t\t<Room />\n\t\t\t\t\t</Sticky>\n\t\t\t\t</Grid.Column>\n\t\t\t\t<Grid.Column stretched width={12}>\n\t\t\t\t\t{children}\n\t\t\t\t</Grid.Column>\n\t\t\t</Grid>\n\t\t</Ref>\n\t);\n};\n\nexport default Content;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Menu, Container, Input } from \"semantic-ui-react\";\nimport Store from \"../store\";\n\nconst Header = observer(() => {\n\tconst store = useContext(Store);\n\tconst users = store.users;\n\treturn (\n\t\t<Menu fixed=\"top\" inverted>\n\t\t\t<Container>\n\t\t\t\t<Menu.Item position=\"right\">\n\t\t\t\t\t<Input\n\t\t\t\t\t\tplaceholder=\"Enter Your Username\"\n\t\t\t\t\t\taction={{\n\t\t\t\t\t\t\tcontent: \"Register\",\n\t\t\t\t\t\t\tonClick: () => users.registerUserName(),\n\t\t\t\t\t\t\tdisabled: users.userNameRegisterButtonDisabled,\n\t\t\t\t\t\t\tloading: users.registeringUser,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={users.registeringUser}\n\t\t\t\t\t\tonChange={(e, { value }) => users.typeUserName(value)}\n\t\t\t\t\t\tvalue={users.tmpUserName}\n\t\t\t\t\t/>\n\t\t\t\t</Menu.Item>\n\t\t\t</Container>\n\t\t</Menu>\n\t);\n});\n\nexport default Header;\n","import GameSpace from \"./GameSpace\";\nimport Content from \"./Content\";\nimport Header from \"./Header\";\nimport React from \"react\";\nimport { Container } from \"semantic-ui-react\";\n\nconst App = () => (\n\t<div>\n\t\t<Header />\n\t\t<Container style={{ marginTop: \"7em\" }}>\n\t\t\t<Content>\n\t\t\t\t<GameSpace />\n\t\t\t</Content>\n\t\t</Container>\n\t</div>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { default as StoreContext, store } from \"./store\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./styles/index.css\";\n\nReactDOM.render(\n\t<StoreContext.Provider value={store}>\n\t\t<App />\n\t</StoreContext.Provider>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}