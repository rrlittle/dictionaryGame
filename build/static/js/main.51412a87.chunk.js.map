{"version":3,"sources":["store/socket.js","store/constants.js","store/users.js","store/game.js","store/definitions.js","store/index.js","components/screens/gameTabs/WaitingForHost.jsx","components/screens/gameTabs/WaitingForResults.jsx","components/screens/gameTabs/VoteList.jsx","components/screens/gameTabs/WatchVotes.jsx","components/screens/gameTabs/WriteADefinition.jsx","components/screens/gameTabs/ChooseAWord.jsx","components/screens/gameTabs/Vote.jsx","components/screens/gameTabs/Summary.jsx","components/screens/TabsScreen.jsx","components/screens/MenuItem.jsx","components/screens/HostScreen.jsx","components/screens/PlayerScreen.jsx","components/screens/LobbyScreen.jsx","components/screens/PleaseRegisterScreen.jsx","components/GameSpace.jsx","components/Room.jsx","components/WordSelector.jsx","components/Content.jsx","components/Header.jsx","components/App.js","reportWebVitals.js","index.js"],"names":["loc","document","location","url","protocol","hostname","port","socket","io","autoConnect","cors","origin","domain","methods","query","userName","window","sessionStorage","getItem","emit","event","data","ack","console","log","args","register","handler","on","constants","CONNECT","DISCONNECT","REGISTER_PLAYER","BEGIN_GAME_CLAIMING_HOST","BEGIN_GAME","HOST_SUBMITS_WORD","PLAYER_SUBMITS_DEFN","VOTE","ON_CONNECT","PLAYER_DISCONNECTS","PLAYER_REGISTERED","GAME_BEGUN","HOST_SUBMITTED_WORD","PLAYER_SUBMITTED_DEFN","ALL_DEFNS_SUBMITTED","ALL_PLAYERS_VOTED","PLAYER_VOTED","Users","store","users","host","tmpUserName","registeredUserName","registeringUser","makeAutoObservable","this","initializeExistingUsers","addPlayer","onGameBegins","Object","entries","map","name","obj","forEach","u","newUser","oldName","action","setItem","val","Game","tmpHostWord","hostWord","hostWordSubmitDisabled","stage","summary","initializeGame","onBegin","onHostSubmittedWord","setStage","onAllPlayersVoted","playing","word","Definitions","playerSubmissionPercent","definitions","hasVoted","initializeDefinitions","onPlayerSubittedDefinition","onPlayerVoted","onGameBegun","shuffle","percent","definition","_id","votes","find","defn","game","isHost","connect","registerUserName","createContext","WaitingForHost","Tab","Pane","WaitForResults","observer","def","useContext","Store","Progress","indicating","Vote","text","allowVote","showUser","onClick","useState","hovering","setHovering","List","Item","onMouseEnter","onMouseLeave","Icon","style","width","Statistic","size","Value","Label","Content","Description","Header","as","color","VoteList","defs","toVote","setToVote","divided","relaxed","Confirm","header","content","open","onCancel","onConfirm","vote","WatchVotes","WriteADefinition","setDef","Form","TextArea","placeholder","rows","onChange","e","value","Button","fluid","float","submitDefinition","ChooseAWord","Input","typeHostWord","submitHostWord","disabled","Summary","Segment","votedBy","points","horizontal","i","Group","begin","claimHost","TabsScreen","panes","screenMap","menu","vertical","icon","activeIndex","MenuItem","Menu","className","menuItem","render","choosing","writing","voting","HostScreen","WaitingForResults","waiting","PlayerScreen","LobbyScreen","PleaseRegisterScreen","GameSpace","isRegistered","Person","Room","people","getPeople","p","WordSelector","loading","setLoading","res","setRes","fetchWord","fetch","then","resp","json","status","Error","catch","meanings","finally","useEffect","Loader","active","wordI","phonetics","partOfSpeechI","partOfSpeech","defI","example","Fragment","Extra","phoneticsI","Meta","children","Grid","stackable","columns","Column","stretched","title","inverted","Container","position","compact","userNameRegisterButtonDisabled","typeUserName","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","Provider","getElementById"],"mappings":"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","file":"static/js/main.51412a87.chunk.js","sourcesContent":["import io from \"socket.io-client\";\n\nconst loc = document.location;\nconst url =\n    loc.protocol + \"//\" + loc.hostname + (loc.port ? \":\" + loc.port : \"\");\n\nconst socket = io(url, {\n    autoConnect: false,\n    cors: {\n        origin: `http://${document.domain}`,\n        methods: [\"GET\", \"POST\"],\n    },\n    query: { userName: window.sessionStorage.getItem(\"userName\") },\n});\n\nexport const connect = () => {\n    console.log(\"connecting\");\n    socket.connect();\n    socket.on(\"connect\", (data) => console.log(\"on connect\", data));\n};\n\nexport const emit = (event, data, ack = () => {}) => {\n    console.log(`EVENT ${event} with data`, data);\n    socket.emit(event, data, (args) => {\n        console.log(`ACK ${event}`);\n        ack(args);\n    });\n};\n\nexport const register = (event, handler) =>\n    socket.on(event, (data) => {\n        console.log(`EXTERNAL EVENT: ${event} with data`, data);\n        handler(data);\n    });\n","const constants = {\n    CONNECT: \"connect\",\n    DISCONNECT: \"disconnect\",\n\n    // client -> server\n    REGISTER_PLAYER: \"register_user\", // 'name'\n    BEGIN_GAME_CLAIMING_HOST: \"begin_game_claiming_host\",\n    BEGIN_GAME: \"begin_game\",\n    HOST_SUBMITS_WORD: \"host_submits_word\", // 'word'\n    PLAYER_SUBMITS_DEFN: \"player_submits_defn\", // 'definition'\n    VOTE: \"vote\", // 'DefnId'\n\n    // server -> client\n    ON_CONNECT: \"on_connect\",\n    PLAYER_DISCONNECTS: \"user_disconnects\",\n    PLAYER_REGISTERED: \"user_registered\",\n    GAME_BEGUN: \"game_begun\",\n    HOST_SUBMITTED_WORD: \"host_submitted_word\",\n    PLAYER_SUBMITTED_DEFN: \"player_submitted_defn\",\n    ALL_DEFNS_SUBMITTED: \"all_defns_submitted\",\n    ALL_PLAYERS_VOTED: \"all_players_voted\",\n    PLAYER_VOTED: \"player_voted\",\n};\nexport default constants;\n","import { makeAutoObservable, action } from \"mobx\";\nimport { register, emit } from \"./socket\";\nimport constants from \"./constants\";\n\nclass Users {\n    store = null;\n\n    users = {};\n\n    host = null;\n\n    tmpUserName = \"\";\n    registeredUserName = \"\";\n    registeringUser = false; // waiting for registration response\n\n    get userNameRegisterButtonDisabled() {\n        return (\n            this.registeringUser ||\n            this.registeredUserName === this.tmpUserName ||\n            !this.tmpUserName\n        );\n    }\n    get getPeople() {\n        return Object.entries(this.users).map(([name, obj]) => ({\n            name,\n            ...obj,\n        }));\n    }\n\n    get isHost() {\n        return this.registeredUserName === this.host;\n    }\n\n    get isRegistered() {\n        return !!this.registeredUserName;\n    }\n\n    constructor(store) {\n        makeAutoObservable(this);\n        this.store = store;\n        this.tmpUserName = window.sessionStorage.getItem(\"userName\") || \"\";\n\n        register(constants.ON_CONNECT, (data) =>\n            this.initializeExistingUsers(data)\n        );\n        register(constants.PLAYER_REGISTERED, (data) => this.addPlayer(data));\n        register(constants.GAME_BEGUN, (data) => this.onGameBegins(data));\n    }\n\n    /** EXTERNAL EVENT HANDLERS **/\n\n    initializeExistingUsers({ users = [], host }) {\n        users.forEach((u) => (this.users[u.name] = u));\n        this.host = host;\n    }\n\n    addPlayer(newUser) {\n        const { name, oldName } = newUser;\n        delete this.users[oldName];\n        this.users[name] = newUser;\n    }\n\n    onGameBegins({ host, users }) {\n        this.host = host;\n        users.forEach((u) => (this.users[u.name] = u));\n    }\n\n    /** TRIGGER EXTERNAL EVENTS **/\n\n    registerUserName() {\n        this.registeringUser = true;\n        emit(\n            constants.REGISTER_PLAYER,\n            this.tmpUserName,\n            action(() => {\n                this.registeringUser = false;\n                this.registeredUserName = this.tmpUserName;\n                window.sessionStorage.setItem(\"userName\", this.tmpUserName);\n            })\n        );\n    }\n\n    /** INTERNAL STATE ACTIONS**/\n\n    typeUserName(val) {\n        this.tmpUserName = val;\n    }\n}\n\nexport default Users;\n","import { makeAutoObservable, action } from \"mobx\";\nimport { register, emit } from \"./socket\";\nimport constants from \"./constants\";\n\nclass Game {\n    store = null;\n    tmpHostWord = \"\";\n    hostWord = \"\";\n    hostWordSubmitDisabled = false;\n    stage = null;\n    summary = [];\n\n    constructor(store) {\n        makeAutoObservable(this);\n        this.store = store;\n\n        register(constants.ON_CONNECT, (data) => this.initializeGame(data));\n        register(constants.GAME_BEGUN, (data) => this.onBegin(data));\n        register(constants.HOST_SUBMITTED_WORD, (data) =>\n            this.onHostSubmittedWord(data)\n        );\n        register(constants.ALL_DEFNS_SUBMITTED, (data) =>\n            this.setStage(\"voting\")\n        );\n        register(constants.ALL_PLAYERS_VOTED, (data) =>\n            this.onAllPlayersVoted(data)\n        );\n    }\n\n    /** EXTERNAL EVENT HANDLERS **/\n\n    initializeGame({ playing, hostWord, stage }) {\n        this.playing = playing;\n        this.hostWord = hostWord;\n        this.stage = stage;\n    }\n\n    onBegin({ stage }) {\n        this.playing = true;\n        this.stage = stage;\n    }\n\n    onHostSubmittedWord({ stage, word = \"fake\" }) {\n        this.hostWord = word;\n        this.stage = stage;\n    }\n    onAllPlayersVoted({ summary }) {\n        this.summary = summary;\n        this.stage = \"summary\";\n    }\n\n    /** TRIGGER EXTERNAL EVENTS **/\n\n    begin() {\n        emit(constants.BEGIN_GAME);\n    }\n    claimHost() {\n        emit(constants.BEGIN_GAME_CLAIMING_HOST);\n    }\n\n    submitHostWord() {\n        this.hostWordSubmitDisabled = true;\n        emit(\n            constants.HOST_SUBMITS_WORD,\n            this.tmpHostWord,\n            action(() => (this.hostWordSubmitDisabled = false))\n        );\n    }\n\n    /** INTERNAL STATE ACTIONS**/\n\n    typeHostWord(val) {\n        this.tmpHostWord = val;\n    }\n\n    setStage(stage) {\n        this.stage = stage;\n    }\n}\n\nexport default Game;\n","import { makeAutoObservable, action } from \"mobx\";\nimport { register, emit } from \"./socket\";\nimport constants from \"./constants\";\nimport find from \"lodash/find\";\nimport shuffle from \"lodash/shuffle\";\n\nclass Definitions {\n    store;\n\n    playerSubmissionPercent = 0;\n    definitions = [];\n    hasVoted = true;\n\n    constructor(store) {\n        makeAutoObservable(this);\n        this.store = store;\n        register(constants.ON_CONNECT, (data) =>\n            this.initializeDefinitions(data)\n        );\n        register(constants.PLAYER_SUBMITTED_DEFN, (data) =>\n            this.onPlayerSubittedDefinition(data)\n        );\n        register(constants.PLAYER_VOTED, (data) => this.onPlayerVoted(data));\n        register(constants.GAME_BEGUN, (data) => this.onGameBegun(data));\n    }\n\n    /** EXTERNAL EVENT HANDLERS **/\n    initializeDefinitions({ definitions }) {\n        this.definitions = shuffle(definitions);\n    }\n\n    onPlayerSubittedDefinition({ percent, definition }) {\n        this.playerSubmissionPercent = percent;\n        this.definitions = shuffle([...this.definitions, definition]);\n    }\n\n    onPlayerVoted({ _id, votes }) {\n        const votedDef = find(this.definitions, { _id });\n        votedDef.votes = votes;\n    }\n\n    onGameBegun() {\n        this.definitions = [];\n    }\n    /** TRIGGER EXTERNAL EVENTS **/\n\n    submitDefinition(defn) {\n        emit(\n            constants.PLAYER_SUBMITS_DEFN,\n            defn,\n            action(() => {\n                if (this.store.game.stage === \"writing\") {\n                    if (this.store.users.isHost)\n                        this.store.game.setStage(\"voting\");\n                    else this.store.game.setStage(\"waiting\");\n                }\n            })\n        );\n    }\n\n    vote(_id) {\n        emit(\n            constants.VOTE,\n            _id,\n            action(() => (this.hasVoted = false))\n        );\n    }\n}\n\nexport default Definitions;\n","import { makeAutoObservable } from \"mobx\";\nimport { createContext } from \"react\";\nimport { connect } from \"./socket\";\nimport Users from \"./users\";\nimport Game from \"./game\";\nimport Definitions from \"./definitions\";\n\nclass Store {\n    users = null;\n    game = null;\n    definitions = null;\n    constructor() {\n        makeAutoObservable(this);\n        this.users = new Users(this);\n        this.game = new Game(this);\n        this.definitions = new Definitions(this);\n\n        // after all listeners in substores have been initialized\n        connect();\n        if (this.users.tmpUserName) this.users.registerUserName();\n    }\n}\n\nexport const store = new Store();\nexport default createContext();\n","import React from \"react\";\nimport { Tab } from \"semantic-ui-react\";\n\nconst WaitingForHost = () => (\n\t<Tab.Pane>\n\t\t<p>Waiting for the host to select a word</p>\n\t</Tab.Pane>\n);\n\nexport default WaitingForHost;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../../store\";\nimport { Tab, Progress } from \"semantic-ui-react\";\n\nconst WaitForResults = observer(() => {\n    const store = useContext(Store);\n    const def = store.definitions;\n    return (\n        <Tab.Pane>\n            <p>Waiting for all the players to submit their defintions.</p>\n            <Progress percent={def.playerSubmissionPercent} indicating />\n        </Tab.Pane>\n    );\n});\n\nexport default WaitForResults;\n","import React, { useContext, useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../../store\";\nimport { List, Confirm, Statistic, Icon } from \"semantic-ui-react\";\n\nconst Vote = ({\n\t_id,\n\ttext = \"NO TEXT\",\n\tvotes = 0,\n\tshowUser,\n\tallowVote,\n\tonClick = () => {},\n}) => {\n\tconst [hovering, setHovering] = useState(false);\n\treturn (\n\t\t<List.Item\n\t\t\tonMouseEnter={() => setHovering(true)}\n\t\t\tonMouseLeave={() => setHovering(false)}\n\t\t>\n\t\t\t<List.Icon style={{ width: 30 }}>\n\t\t\t\t<Statistic size=\"mini\">\n\t\t\t\t\t<Statistic.Value>{votes}</Statistic.Value>\n\t\t\t\t\t<Statistic.Label>Votes</Statistic.Label>\n\t\t\t\t</Statistic>\n\t\t\t</List.Icon>\n\t\t\t<List.Content onClick={allowVote ? () => onClick() : () => {}}>\n\t\t\t\t<List.Description>{text}</List.Description>\n\t\t\t\t<List.Header as=\"a\">\n\t\t\t\t\t{hovering && allowVote && (\n\t\t\t\t\t\t<Icon name=\"check\" color=\"green\" />\n\t\t\t\t\t)}\n\t\t\t\t</List.Header>\n\t\t\t</List.Content>\n\t\t</List.Item>\n\t);\n};\n\nconst VoteList = observer(({ allowVote, showUser }) => {\n\tconst store = useContext(Store);\n\tconst defs = store.definitions;\n\tconst [toVote, setToVote] = useState(null);\n\treturn (\n\t\t<div>\n\t\t\t<List divided relaxed>\n\t\t\t\t{defs.definitions.map((def) => {\n\t\t\t\t\tconst { _id } = def;\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<Vote\n\t\t\t\t\t\t\tshowUser={showUser}\n\t\t\t\t\t\t\tallowVote={allowVote}\n\t\t\t\t\t\t\tonClick={() => setToVote(def)}\n\t\t\t\t\t\t\tkey={_id}\n\t\t\t\t\t\t\t{...def}\n\t\t\t\t\t\t/>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</List>\n\t\t\t<Confirm\n\t\t\t\theader=\"Do you want to vote for this Defintion\"\n\t\t\t\tcontent={!!toVote ? toVote.text : \"\"}\n\t\t\t\topen={!!toVote}\n\t\t\t\tonCancel={() => setToVote(null)}\n\t\t\t\tonConfirm={() => {\n\t\t\t\t\tdefs.vote(toVote._id);\n\t\t\t\t\tsetToVote(null);\n\t\t\t\t}}\n\t\t\t/>\n\t\t</div>\n\t);\n});\n\nexport default VoteList;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../../store\";\nimport { Tab, Progress } from \"semantic-ui-react\";\nimport VoteList from \"./VoteList\";\n\nconst WatchVotes = observer(() => {\n    const store = useContext(Store);\n    const defs = store.definitions;\n    return (\n        <Tab.Pane>\n            <p>Waiting for all the players to submit their definitions.</p>\n            <Progress percent={defs.playerSubmissionPercent} indicating />\n            <VoteList showUser />\n        </Tab.Pane>\n    );\n});\n\nexport default WatchVotes;\n","import React, { useContext, useState } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../../store\";\n\nimport { Tab, Form, TextArea, Button, Header, Icon } from \"semantic-ui-react\";\n\nconst WriteADefinition = observer(() => {\n\tconst [def, setDef] = useState(\"\");\n\tconst store = useContext(Store);\n\tconst game = store.game;\n\tconst defs = store.definitions;\n\treturn (\n\t\t<Tab.Pane>\n\t\t\t<Header as=\"h2\">\n\t\t\t\t<Icon name=\"envelope outline\" />\n\t\t\t\t<Header.Content>{game.hostWord}</Header.Content>\n\t\t\t</Header>\n\t\t\t<p>\n\t\t\t\tEnter your definition. Once all the players are done. we'll move\n\t\t\t\tonto voting\n\t\t\t</p>\n\t\t\t<Form>\n\t\t\t\t<TextArea\n\t\t\t\t\tplaceholder=\"Enter your definition\"\n\t\t\t\t\trows={4}\n\t\t\t\t\tonChange={(e, { value }) => setDef(value)}\n\t\t\t\t\tvalue={def}\n\t\t\t\t/>\n\t\t\t\t<Button\n\t\t\t\t\tfluid\n\t\t\t\t\tfloat=\"right\"\n\t\t\t\t\tcolor=\"teal\"\n\t\t\t\t\tcontent=\"Submit Definition\"\n\t\t\t\t\tonClick={() => defs.submitDefinition(def)}\n\t\t\t\t/>\n\t\t\t</Form>\n\t\t</Tab.Pane>\n\t);\n});\n\nexport default WriteADefinition;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../../store\";\nimport { Tab, Input, Button } from \"semantic-ui-react\";\n\nconst ChooseAWord = observer(() => {\n\tconst store = useContext(Store);\n\tconst game = store.game;\n\n\treturn (\n\t\t<Tab.Pane>\n\t\t\t<p>\n\t\t\t\tEnter a word. once you are ready hit subit to notify all the\n\t\t\t\tplayers\n\t\t\t</p>\n\t\t\t<Input\n\t\t\t\tfluid\n\t\t\t\tplaceholder=\"Enter a word\"\n\t\t\t\tvalue={store.hostWord}\n\t\t\t\tonChange={(e, { value }) => game.typeHostWord(value)}\n\t\t\t/>\n\t\t\t<Button\n\t\t\t\tcontent=\"Submit\"\n\t\t\t\tcolor=\"teal\"\n\t\t\t\tfluid\n\t\t\t\tonClick={() => game.submitHostWord()}\n\t\t\t\tdisabled={store.hostWordSubmitDisabled}\n\t\t\t/>\n\t\t</Tab.Pane>\n\t);\n});\n\nexport default ChooseAWord;\n","import React from \"react\";\nimport { Tab, Header } from \"semantic-ui-react\";\nimport VoteList from \"./VoteList\";\n\nconst Vote = () => (\n    <Tab.Pane>\n        <Header as=\"h2\" content=\"hostWord\"></Header>\n        <VoteList allowVote />\n    </Tab.Pane>\n);\n\nexport default Vote;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../../store\";\nimport {\n    Tab,\n    Segment,\n    List,\n    Header,\n    Icon,\n    Statistic,\n    Button,\n} from \"semantic-ui-react\";\n\nconst Summary = observer(() => {\n    const store = useContext(Store);\n    const game = store.game;\n    return (\n        <Tab.Pane>\n            <Segment>\n                <p>Round is complete!</p>\n                <Header as=\"h2\">\n                    <Icon name=\"envelope outline\" />\n                    <Header.Content>{game.hostWord}</Header.Content>\n                </Header>\n            </Segment>\n            <List divided relaxed>\n                {game.summary.map(({ name, host, text, votedBy, points }) => (\n                    <List.Item key={name}>\n                        <List.Icon>\n                            <Statistic size=\"mini\">\n                                <Statistic.Value>{points}</Statistic.Value>\n                                <Statistic.Label>Points</Statistic.Label>\n                            </Statistic>\n                        </List.Icon>\n                        <List.Content>\n                            <List.Header as=\"a\">\n                                <Icon\n                                    name={host ? \"user secret\" : \"user outline\"}\n                                />\n                                {name}\n                            </List.Header>\n                            <List.Description>{text}</List.Description>\n                            <List horizontal>\n                                {votedBy.map((name, i) => (\n                                    <List.Item key={i}>\n                                        <List.Header as=\"a\">{name}</List.Header>\n                                    </List.Item>\n                                ))}\n                            </List>\n                        </List.Content>\n                    </List.Item>\n                ))}\n            </List>\n\n            <Segment>\n                <p>Restart the game</p>\n                <Button.Group>\n                    <Button\n                        content=\"randomize Host\"\n                        onClick={() => game.begin()}\n                    />\n                    <Button\n                        content=\"claim Host\"\n                        onClick={() => game.claimHost()}\n                    />\n                </Button.Group>\n            </Segment>\n        </Tab.Pane>\n    );\n});\n\nexport default Summary;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../store\";\nimport { Tab, Header } from \"semantic-ui-react\";\n\nconst TabsScreen = observer(({ panes, screenMap = {} }) => {\n    const store = useContext(Store);\n    const game = store.game;\n    return (\n        <div>\n            <Tab\n                menu={{\n                    fluid: true,\n                    vertical: true,\n                    icon: \"labeled\",\n                    color: \"teal\",\n                }}\n                panes={panes}\n                activeIndex={screenMap[game.stage]}\n            />\n        </div>\n    );\n});\n\nexport default TabsScreen;\n","import React from \"react\";\nimport { Menu } from \"semantic-ui-react\";\nimport \"./style/MenuItem.css\";\n\nconst MenuItem = ({ icon, content }) => (\n    <Menu.Item\n        icon={icon}\n        content={<div className=\"hideOnMobile\">{content}</div>}\n    />\n);\nexport default MenuItem;\n","import React from \"react\";\nimport { ChooseAWord, WriteADefinition, WatchVotes, Summary } from \"./gameTabs\";\nimport TabsScreen from \"./TabsScreen\";\nimport MenuItem from \"./MenuItem\";\n\nconst panes = [\n    {\n        menuItem: <MenuItem icon=\"search\" content=\"Pick a Word\" key=\"s\" />,\n        render: () => <ChooseAWord />,\n    },\n    {\n        menuItem: (\n            <MenuItem icon=\"edit\" content=\"Write True Definition\" key=\"w\" />\n        ),\n        render: () => <WriteADefinition />,\n    },\n    {\n        menuItem: (\n            <MenuItem icon=\"eye\" content=\"Wait for Players to Vote\" key=\"v\" />\n        ),\n        render: () => <WatchVotes />,\n    },\n    {\n        menuItem: <MenuItem icon=\"list\" content=\"Summary\" key=\"sum\" />,\n        render: () => <Summary />,\n    },\n];\n\nconst screenMap = {\n    choosing: 0,\n    writing: 1,\n    voting: 2,\n    summary: 3,\n};\n\nconst HostScreen = () => <TabsScreen panes={panes} screenMap={screenMap} />;\n\nexport default HostScreen;\n","import React from \"react\";\nimport {\n\tWaitingForHost,\n\tWriteADefinition,\n\tWaitingForResults,\n\tVote,\n\tSummary,\n} from \"./gameTabs\";\nimport TabsScreen from \"./TabsScreen\";\nimport MenuItem from \"./MenuItem\";\n\nconst panes = [\n\t{\n\t\tmenuItem: (\n\t\t\t<MenuItem key=\"h\" icon=\"clock outline\" content=\"Wait for Host\" />\n\t\t),\n\t\trender: () => <WaitingForHost />,\n\t},\n\t{\n\t\tmenuItem: <MenuItem key=\"w\" icon=\"edit\" content=\"Write Definition\" />,\n\t\trender: () => <WriteADefinition />,\n\t},\n\t{\n\t\tmenuItem: (\n\t\t\t<MenuItem key=\"wait\" icon=\"clock\" content=\"Other Players Writing\" />\n\t\t),\n\t\trender: () => <WaitingForResults />,\n\t},\n\t{\n\t\tmenuItem: <MenuItem key=\"v\" icon=\"clipboard check\" content=\"Vote\" />,\n\t\trender: () => <Vote />,\n\t},\n\t{\n\t\tmenuItem: <MenuItem key=\"sum\" icon=\"list\" content=\"Summary\" />,\n\t\trender: () => <Summary />,\n\t},\n];\n\nconst screenMap = {\n\tchoosing: 0,\n\twriting: 1,\n\twaiting: 2,\n\tvoting: 3,\n\tsummary: 4,\n};\n\nconst PlayerScreen = () => <TabsScreen panes={panes} screenMap={screenMap} />;\n\nexport default PlayerScreen;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../../store\";\nimport { Segment, Button } from \"semantic-ui-react\";\n\nconst LobbyScreen = observer(() => {\n    const store = useContext(Store);\n    const game = store.game;\n    return (\n        <div>\n            <Segment>\n                <p>The game hasn't started yet</p>\n                <p>Once Everyone has registered hit the button to start</p>\n                <Button fluid onClick={() => game.begin()} content=\"Begin\" />\n            </Segment>\n        </div>\n    );\n});\n\nexport default LobbyScreen;\n","import React from \"react\";\nimport { Segment } from \"semantic-ui-react\";\n\nconst PleaseRegisterScreen = () => {\n    return (\n        <div>\n            <Segment>\n                <p>Please Register a name to join the game in progress</p>\n            </Segment>\n        </div>\n    );\n};\n\nexport default PleaseRegisterScreen;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../store\";\nimport {\n    HostScreen,\n    PlayerScreen,\n    LobbyScreen,\n    PleaseRegisterScreen,\n} from \"./screens\";\n\nconst GameSpace = observer(() => {\n    const store = useContext(Store);\n    const game = store.game;\n    const users = store.users;\n    if (!users.isRegistered) return <PleaseRegisterScreen />;\n    if (game.stage === \"lobby\") return <LobbyScreen />;\n    if (users.isHost) return <HostScreen />;\n    else return <PlayerScreen />;\n});\n\nexport default GameSpace;\n","import React, { useContext } from \"react\";\nimport { Segment, Header, List } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../store\";\n\nconst Person = ({ name = \"Anon\", host = false, points = -1 }) => (\n\t<List.Item>\n\t\t<List.Icon\n\t\t\tname={host ? \"user secret\" : \"user outline\"}\n\t\t\tcolor={host ? \"olive\" : \"blue\"}\n\t\t></List.Icon>\n\t\t<List.Content>\n\t\t\t<List.Header as=\"a\">{name}</List.Header>\n\t\t\t<List.Description> {points} points</List.Description>\n\t\t</List.Content>\n\t</List.Item>\n);\n\nconst Room = observer(() => {\n\tconst store = useContext(Store);\n\tconst users = store.users;\n\tconst people = users.getPeople;\n\tconst host = users.host;\n\treturn (\n\t\t<Segment>\n\t\t\t<Header>People in the room</Header>\n\t\t\t<List>\n\t\t\t\t{people.map(({ name, ...p }) => (\n\t\t\t\t\t<Person\n\t\t\t\t\t\tkey={name}\n\t\t\t\t\t\tname={name}\n\t\t\t\t\t\t{...p}\n\t\t\t\t\t\thost={name === host}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</List>\n\t\t</Segment>\n\t);\n});\n\nexport default Room;\n","import React, { useState, useEffect } from \"react\";\nimport { Segment, Button, Item, Loader } from \"semantic-ui-react\";\n\nconst WordSelector = () => {\n    const [loading, setLoading] = useState(false);\n    const [res, setRes] = useState([]);\n    const fetchWord = () => {\n        setLoading(true);\n        fetch(\"/word\")\n            .then((resp) => resp.json())\n            .then(({ word, definition }) => {\n                fetch(`https://api.dictionaryapi.dev/api/v2/entries/en/${word}`)\n                    .then((resp) => {\n                        if (resp.status === 200) return resp.json();\n                        throw new Error();\n                    })\n                    .then((defs) => {\n                        setRes(defs);\n                    })\n                    .catch(() => {\n                        setRes([\n                            {\n                                word,\n                                meanings: [{ definitions: [{ definition }] }],\n                            },\n                        ]);\n                    })\n                    .finally(() => setLoading(false));\n            });\n    };\n    useEffect(() => {\n        fetchWord();\n    }, []);\n    return (\n        <Segment>\n            <Item.Group>\n                {loading && <Loader active></Loader>}\n                {res.map(({ word, phonetics = [], meanings = [] }, wordI) => (\n                    <Item key={wordI}>\n                        <Item.Content>\n                            <Item.Header>{word}</Item.Header>\n                            {meanings.map(\n                                (\n                                    { partOfSpeech, definitions = [] },\n                                    partOfSpeechI\n                                ) =>\n                                    definitions.map(\n                                        ({ definition, example }, defI) => (\n                                            <React.Fragment\n                                                key={`${partOfSpeechI}_${defI}`}\n                                            >\n                                                <Item.Description>\n                                                    <i>{partOfSpeech}</i>{\" \"}\n                                                    {definition}\n                                                </Item.Description>\n                                                <Item.Extra>\n                                                    {example}\n                                                </Item.Extra>\n                                            </React.Fragment>\n                                        )\n                                    )\n                            )}\n                            {phonetics.map(({ text }, phoneticsI) => (\n                                <Item.Meta key={`phonetics_${phoneticsI}`}>\n                                    {text}\n                                </Item.Meta>\n                            ))}\n                        </Item.Content>\n                    </Item>\n                ))}\n            </Item.Group>\n            <Button\n                content=\"get a random word\"\n                onClick={fetchWord}\n                disabled={loading}\n            />\n        </Segment>\n    );\n};\n\nexport default WordSelector;\n","import React, { useContext } from \"react\";\nimport { Grid } from \"semantic-ui-react\";\nimport { observer } from \"mobx-react\";\nimport Store from \"../store\";\nimport Room from \"./Room\";\nimport WordSelector from \"./WordSelector\";\n\nconst Content = observer(({ children }) => {\n\tconst store = useContext(Store);\n\tconst isHost = store.users.isHost;\n\treturn (\n\t\t<Grid stackable columns={2}>\n\t\t\t<Grid.Column stretched width={12}>\n\t\t\t\t{children}\n\t\t\t</Grid.Column>\n\t\t\t<Grid.Column width={4}>\n\t\t\t\t<Room />\n\t\t\t</Grid.Column>\n\t\t\t{isHost && (\n\t\t\t\t<Grid.Column width={16}>\n\t\t\t\t\t<WordSelector />\n\t\t\t\t</Grid.Column>\n\t\t\t)}\n\t\t</Grid>\n\t);\n});\n\nexport default Content;\n","import React, { useContext } from \"react\";\nimport { observer } from \"mobx-react\";\nimport { Menu, Container, Input, Icon } from \"semantic-ui-react\";\nimport Store from \"../store\";\n\nconst Header = observer(() => {\n\tconst store = useContext(Store);\n\tconst users = store.users;\n\tif (users.registeredUserName) {\n\t\tdocument.title = users.registeredUserName;\n\t}\n\treturn (\n\t\t<Menu inverted>\n\t\t\t<Container>\n\t\t\t\t{users.isRegistered && (\n\t\t\t\t\t<Menu.Item>\n\t\t\t\t\t\t<Icon\n\t\t\t\t\t\t\tsize=\"big\"\n\t\t\t\t\t\t\tname={users.isHost ? \"user secret\" : \"user outline\"}\n\t\t\t\t\t\t\tcolor={users.isHost ? \"olive\" : \"blue\"}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Menu.Item>\n\t\t\t\t)}\n\t\t\t\t<Menu.Item position=\"right\">\n\t\t\t\t\t<Input\n\t\t\t\t\t\tplaceholder=\"Enter Your Username\"\n\t\t\t\t\t\taction={{\n\t\t\t\t\t\t\tcompact: true,\n\t\t\t\t\t\t\ticon: \"user add\",\n\t\t\t\t\t\t\tcolor: \"teal\",\n\t\t\t\t\t\t\tonClick: () => users.registerUserName(),\n\t\t\t\t\t\t\tdisabled: users.userNameRegisterButtonDisabled,\n\t\t\t\t\t\t\tloading: users.registeringUser,\n\t\t\t\t\t\t}}\n\t\t\t\t\t\tdisabled={users.registeringUser}\n\t\t\t\t\t\tonChange={(e, { value }) => users.typeUserName(value)}\n\t\t\t\t\t\tvalue={users.tmpUserName}\n\t\t\t\t\t/>\n\t\t\t\t</Menu.Item>\n\t\t\t</Container>\n\t\t</Menu>\n\t);\n});\n\nexport default Header;\n","import GameSpace from \"./GameSpace\";\nimport Content from \"./Content\";\nimport Header from \"./Header\";\nimport React from \"react\";\nimport { Container } from \"semantic-ui-react\";\n\nconst App = () => (\n    <div>\n        <Header />\n        <Container>\n            <Content>\n                <GameSpace />\n            </Content>\n        </Container>\n    </div>\n);\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport { default as StoreContext, store } from \"./store\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"semantic-ui-css/semantic.min.css\";\nimport \"./styles/index.css\";\n\nReactDOM.render(\n\t<StoreContext.Provider value={store}>\n\t\t<App />\n\t</StoreContext.Provider>,\n\tdocument.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}